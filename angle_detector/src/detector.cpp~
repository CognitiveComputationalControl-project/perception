#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/PoseArray.h>
#include <iostream>
#include <cmath>
#include <vector>
#include <list>
#include <string>
#include <boost/thread/mutex.hpp>
#include <iostream>
#include <pcl/console/parse.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/sample_consensus/sac_model_plane.h>
#include <pcl/sample_consensus/sac_model_sphere.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <boost/thread/thread.hpp>


boost::shared_ptr<pcl::visualization::PCLVisualizer>
int dim;

simpleVis (pcl::PointCloud<pcl::PointXYZ>::ConstPtr cloud)
{
  // --------------------------------------------
  // -----Open 3D viewer and add point cloud-----
  // --------------------------------------------
  boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer (new pcl::visualization::PCLVisualizer ("3D Viewer"));
  viewer->setBackgroundColor (0, 0, 0);
  viewer->addPointCloud<pcl::PointXYZ> (cloud, "sample cloud");
  viewer->setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, "sample cloud");
  //viewer->addCoordinateSystem (1.0, "global");
  viewer->initCameraParameters ();
  return (viewer);
}

pcl::PointCloud<pcl::PointXYZ>::Ptr final (new pcl::PointCloud<pcl::PointXYZ>);

void RanSac(){
 pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>);
 
 cloud->width    = dim;
 cloud->height   = 1;
 cloud->is_dense = false;
 cloud->points.resize (cloud->width * cloud->height);
 for (size_t i = 0; i < cloud->points.size (); ++i)
 {
 	cloud->points[i].x = laser_x.at(i);
      	cloud->points[i].y = laser_y.at(i);
 }

 std::vector<int> inliers;
 pcl::SampleConsensusModelSphere<pcl::PointXYZ>::Ptr
 model_s(new pcl::SampleConsensusModelSphere<pcl::PointXYZ> (cloud));
 pcl::SampleConsensusModelPlane<pcl::PointXYZ>::Ptr
 model_p (new pcl::SampleConsensusModelPlane<pcl::PointXYZ> (cloud));

 if(pcl::console::find_argument (argc, argv, "-f") >= 0)
 {
        pcl::RandomSampleConsensus<pcl::PointXYZ> ransac (model_p);
        ransac.setDistanceThreshold (.01);
        ransac.computeModel();
        ransac.getInliers(inliers);
 }
 else if (pcl::console::find_argument (argc, argv, "-sf") >= 0 )
 {
    	pcl::RandomSampleConsensus<pcl::PointXYZ> ransac (model_s);
    	ransac.setDistanceThreshold (.01);
    	ransac.computeModel();
    	ransac.getInliers(inliers);
 }
 // copies all inliers of the model computed to another PointCloud
 pcl::copyPointCloud<pcl::PointXYZ>(*cloud, inliers, *final);

 // creates the visualization object and adds either our orignial cloud or all of the inliers
 // depending on the command line arguments specified.
 boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer;
 if (pcl::console::find_argument (argc, argv, "-f") >= 0 || pcl::console::find_argument (argc, argv, "-sf") >= 0)
    	viewer = simpleVis(final);
 else
    	viewer = simpleVis(cloud);
 while (!viewer->wasStopped ())
 {
    	viewer->spinOnce (100);
    	boost::this_thread::sleep (boost::posix_time::microseconds (100000));
 }

      
return;
}

using namespace std;

bool sensor_on   = false;

int g_counter = 0;

vector < double >  laser_x;
vector < double >  laser_y;
vector < double >  laser_r;
vector < double >  laser_t;


string sensor_frame_id;
sensor_msgs::LaserScan SensorMsg;
boost::mutex mutex;

void LaserCallback (const sensor_msgs::LaserScan::ConstPtr& msg);



int main(int argc, char **argv){

  ros::init(argc, argv, "angle_detector");
  ros::NodeHandle n;
  ros::Publisher  node_pub = n.advertise <std_msgs::Float32>("angle_detector", 2);
  string laser_scan = "/hsrb/base_scan";
  ros::param::get("~laser_scan", laser_scan);
  ros::Subscriber node_sub = n.subscribe(laser_scan, 2, LaserCallback);
  geometry_msgs::PoseArray msgx;

  ros::Rate loop_rate(50);
  std_msgs::Float32 angle;
  bool door_first_found = false;
  while( ros::ok() ){
    if( sensor_on == true  && door_first_found == false){
      // find door : push the data into a pointcloud & use RANSAC to fit a line 
	// initialize PointClouds 
	RanSac();
	door_first_found = true;
    }

    else if( sensor_on == true  && door_first_found == true){
      // update door

      // publish door
      node_pub.publish( angle );
    }

  }
    ros::spin();
    loop_rate.sleep();
  return 0;
}


void LaserCallback (const sensor_msgs::LaserScan::ConstPtr& msg){

  // To get header data from sensor msg
  SensorMsg = *msg;

  // Vectors...
  laser_x.clear(); 
  laser_y.clear(); 
  laser_r.clear(); 
  laser_t.clear(); 
    
  sensor_on = true;
  
  double px, py, pr, pt;


  for( unsigned i = 0; i < msg->ranges.size(); i++ ){    
    pr = msg->ranges[ i ];
    pt = msg->angle_min + ( i * msg->angle_increment);
    px = pr * cos (pt);
    py = -pr * sin(pt); 
    if (  (pt < 0.89) && (pt > -0.89) )
    {
    	laser_r.push_back( pr );
        laser_t.push_back( pt );
	laser_x.push_back( px );
	laser_y.push_back( py );
    }
    
  }

  
  dim = laser_r.size();

  std::cout<< msg->angle_min << std::endl;
  std::cout<< msg->angle_max << std::endl;
  std::cout<< msg->angle_increment << std::endl;
  std::cout<< msg->range_min << std::endl;
  std::cout<< dim << std::endl;
//  float32 angle_min        # start angle of the scan [rad]
//  float32 angle_max        # end angle of the scan [rad]
//  float32 angle_increment  # angular distance between measurements [rad]
//  As an example, to access one of these values, write : msg->angle_min

//  You are only interested in the points which are between two angles,
//for( unsigned i = /* starting angle */; i < /* last angle */; i++ ) 
  //  {    
      
    /*Save points*/
 // }
	
}
